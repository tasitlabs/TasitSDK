(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(6),o=(n(0),n(79)),c={id:"get-started",title:"Get started",sidebar_label:"Get started"},s={unversionedId:"get-started",id:"get-started",isDocsHomePage:!1,title:"Get started",description:"You can use Tasit to create user-friendly mobile iOS and Android apps for a dapp using React Native.",source:"@site/docs/GetStarted.md",permalink:"/docs/get-started",editUrl:"https://github.com/tasitlabs/tasit-sdk/tree/develop/packages/docs/docs/GetStarted.md",sidebar_label:"Get started",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/introduction"},next:{title:"Main features",permalink:"/docs/main-features"}},i=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Modular",id:"modular",children:[]}],l={rightToc:i};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"You can use Tasit to create user-friendly mobile iOS and Android apps for a dapp using React Native."),Object(o.b)("p",null,"Looking for the entry point for the ",Object(o.b)("inlineCode",{parentName:"p"},"tasit")," package? ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/tasitlabs/tasit-sdk/tree/develop/packages/sdk"}),"That's here"),". Tasit is a collection of smaller packages exported as one using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://lerna.js.org/"}),"lerna"),"."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"Getting started is as simple as running"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"npm install --save tasit")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"Are you looking to add Ethereum-related functionality to a pre-existing app using Tasit?"),Object(o.b)("p",null,"Using Tasit from within your app is simple.\nIn ",Object(o.b)("inlineCode",{parentName:"p"},"App.js")," or the appropriate React Native component, import whichever APIs you need from Tasit."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'import { hooks } from "tasit";\nconst { useAccount } = hooks;\n\nimport * as Random from "expo-random";\n\nexport default function App() {\n  const [randomBytes, setRandomBytes] = useState(new Uint8Array());\n\n  useEffect(() => {\n    let isMounted = true;\n    async function makeRandomBytes() {\n      const randomBytesThatWereGenerated = await Random.getRandomBytesAsync(16);\n      if (isMounted) {\n        console.log("randomBytes generated");\n        setRandomBytes(randomBytesThatWereGenerated);\n      }\n    }\n    makeRandomBytes();\n    return () => {\n      isMounted = false;\n    };\n  }, []); // Just run this once\n\n  const randomBytesGenerated = randomBytes.length !== 0;\n\n  const address = useAccount({\n    randomBytes,\n    randomBytesGenerated,\n  });\n\n  console.log({ address });\n\n  // ...render, etc.\n\n}\n')),Object(o.b)("p",null,"Or maybe you want to interact with a contract:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'import { Contracts } from "tasit";\n\nconst { NFT } = Contracts;\n\n// const contractAddress = \'0x0E86...333\'\n\nconst contract = new NFT(contractAddress);\n\nconst action = contract.safeTransferfrom(/*...*/);\naction.on("error", errorListener);\naction.on("enoughConfirmations", successListener);\naction.sendForFree(); // meta-tx broadcast\n\n// Do optimistic UI updates immediately, while making sure\n// to update the UI again when there are enough\n// confirmations for your use case\n// ...\n')),Object(o.b)("h2",{id:"modular"},"Modular"),Object(o.b)("p",null,"Tasit is designed with modularity in mind. Are you only planning on using Tasit for generating an ephemeral Ethereum acccount in your app? That works too!"),Object(o.b)("p",null,"You can install ",Object(o.b)("inlineCode",{parentName:"p"},"@tasit/account")," directly (without the hooks API and the rest of the ",Object(o.b)("inlineCode",{parentName:"p"},"tasit")," functionality) and keep your app's dependencies leaner."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"npm install --save @tasit/account\n")),Object(o.b)("p",null,"Then the usage example from before becomes:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'import Account from "@tasit/account";\n\nexport default function App() {\n  // ...\n  useEffect(() => {\n    async function makeAccount() {\n      const randomBytes = await Random.getRandomBytesAsync(16);\n\n      const account = Account.createUsingRandomness(randomBytes);\n      console.log({ account })\n      const { address } = account;\n      console.log({ address }); // 0x...\n\n    }\n    makeAccount();\n  }, []); // Just run this once\n  // ...render, etc.\n}\n')),Object(o.b)("p",null,"...with the rest of the code remaining the same."),Object(o.b)("hr",null))}u.isMDXComponent=!0},79:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,b=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.a.createElement(b,s(s({ref:t},l),{},{components:n})):r.a.createElement(b,s({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);