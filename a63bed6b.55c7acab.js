(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{110:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return u}));var r=a(0),n=a.n(r),i=n.a.createContext({}),o=function(e){var t=n.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):Object.assign({},t,e)),a},s=function(e){var t=o(e.components);return n.a.createElement(i.Provider,{value:t},e.children)};var c="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},p=Object(r.forwardRef)((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=function(e,t){var a={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(a[r]=e[r]);return a}(e,["components","mdxType","originalType","parentName"]),p=o(a),u=r,h=p[s+"."+u]||p[u]||l[u]||i;return a?n.a.createElement(h,Object.assign({},{ref:t},c,{components:a})):n.a.createElement(h,Object.assign({},{ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=a[u];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},98:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return l}));a(0);var r=a(110);function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}const i={id:"other-features",title:"Other features",sidebar_label:"Other features"},o=[],s={rightToc:o},c="wrapper";function l({components:e,...t}){return Object(r.b)(c,n({},s,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"#configurable-json-rpc-client"}),"Configurable JSON-RPC client")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"#tool-for-finding-the-address-of-a-popular-smart-contract"}),"Tool for finding the address of a popular smart contract")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"#serenity-support"}),"Serenity support"))),Object(r.b)("h4",{id:"configurable-json-rpc-client"},"Configurable JSON-RPC client"),Object(r.b)("p",null,"We realize that different developers have different takes on whether it's an acceptable compromise to use Infura in the way that MetaMask does in the browser or whether a local Ethereum light client is warranted more like in the original version of Status or Augur. We anticipate that in the short term, almost all developers using this SDK will use Infura. It's a good stopgap solution for now."),Object(r.b)("p",null,"We leave the JSON-RPC provider configurable so that the SDK doesn't take an opinionated stance on this."),Object(r.b)("p",null,"There are a couple projects working to make it simple to spin up your own high-availability, high-performance JSON-RPC client(s) (including Infura) or to use a decentralized and incentivized network of full nodes, so that should decentralize things a bit until we get to Serenity. See ",Object(r.b)("a",n({parentName:"p"},{href:"https://dappnode.io/"}),"DAppNode"),", ",Object(r.b)("a",n({parentName:"p"},{href:"https://github.com/ChainSafeSystems/denode"}),"denode"),", ",Object(r.b)("a",n({parentName:"p"},{href:"https://vipnode.org/"}),"Vipnode"),", and ",Object(r.b)("a",n({parentName:"p"},{href:"https://slock.it/incubed.html"}),"Incubed")," by slock.it."),Object(r.b)("p",null,Object(r.b)("a",n({parentName:"p"},{href:"/packages/tasit-action/"}),Object(r.b)("inlineCode",{parentName:"a"},"tasit-action")," is the child package")," that implements these features for the Tasit SDK."),Object(r.b)("h5",{id:"in-the-future"},"In the future"),Object(r.b)("p",null,"We have no plans until Serenity to make a special abstraction for running a local light geth node like Status did originally. The Tasit SDK works with whatever JSON-RPC client you point it at, but we won't be adding an abstraction for using a light client within the native mobile dapp until Serenity. People have had too many issues with this on mobile: dropped network connections, using all disk space, battery usage, etc."),Object(r.b)("p",null,"Looking towards the future, light and ultralight client projects we're tracking for first-class support in this SDK include:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"https://nimbus.status.im/"}),"Nimbus")," by Status"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"https://www.musteka.la/"}),"Mustekala")," by MetaMask"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",n({parentName:"li"},{href:"https://github.com/paritytech/js-libs/tree/master/packages/light.js"}),"LightJS")," by Parity")),Object(r.b)("h4",{id:"tool-for-finding-the-address-of-a-popular-smart-contract"},"Tool for finding the address of a popular smart contract"),Object(r.b)("p",null,"The Tasit SDK also provides a standalone tool for discovering the current address of a high-profile dapp project\u2019s primary smart contract interface. We detect the interface / ERC standard a smart contract implements using ERC-165 standard interface detection."),Object(r.b)("p",null,"We also track the latest ABI and interface address for the most heavily used dapp projects directly via their open-source GitHub repos."),Object(r.b)("p",null,Object(r.b)("a",n({parentName:"p"},{href:"/packages/tasit-contracts/"}),Object(r.b)("inlineCode",{parentName:"a"},"tasit-contracts")," is the child package")," that implements these features for the Tasit SDK."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"This makes it simpler to customize the autogenerated app for a certain ERC standard and swap it to use with your own smart contracts or the already-on-chain smart contracts for a different dapp of that same ERC-type.")),Object(r.b)("h4",{id:"serenity-support"},"Serenity support"),Object(r.b)("p",null,"The Tasit SDK will work with the Ethereum Serenity release. We support Ethereum-based dapps to start, and in the long run the Tasit SDK will work with any blockchain that uses EVM and/or eWASM."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"In order for the Tasit SDK to make a difference for current and future users of Ethereum, it will need to support future versions of the EVM.")),Object(r.b)("hr",null),Object(r.b)("p",null,Object(r.b)("a",n({parentName:"p"},{href:"/docs/home"}),"Go back to the home page of the docs")))}l.isMDXComponent=!0}}]);